// Generated by CoffeeScript 1.8.0
(function() {
  var INDEX, MAX_FOLLOWERS, MAX_SESSION, PORT, abortTrackingSession, express, host, informLocationUpdate, io, joinTrackingSession, logger, notifyFollower, path, registerTrackingSessionCode, registrations, server, shortId, socketIO, _;

  express = require('express');

  socketIO = require('socket.io');

  shortId = require('shortid');

  _ = require('underscore');

  path = require('path');

  registrations = {};

  host = '0.0.0.0';

  PORT = process.env.PORT || '3000';

  INDEX = path.join(__dirname, '..', 'client', 'index.html');

  MAX_SESSION = 1;

  MAX_FOLLOWERS = 1;

  logger = function(type, message) {
    var date;
    date = new Date().toISOString();
    return console.log("[" + date + "] - " + type + " - " + message);
  };

  server = express().use(express["static"]('client')).use(function(req, res) {
    return res.sendFile(INDEX);
  }).listen(PORT, function() {
    return logger('Server', "Start server on " + host + ":" + (process.env.PORT || PORT));
  });

  io = socketIO(server);

  registerTrackingSessionCode = function(socket) {
    var curCount, sessionCode;
    logger('Registration', 'Trying to get new Registration code...');
    curCount = _.keys(registrations).length;
    if (curCount >= MAX_SESSION) {
      logger('Registration', "Failed: " + curCount + " on " + MAX_SESSION + " space available");
      return null;
    }
    sessionCode = shortId.generate();
    while (!_.isUndefined(registrations[sessionCode])) {
      sessionCode = shortId.generate();
    }
    logger('Registration', "New registration code affected: " + sessionCode);
    socket.trackingSessionCode = sessionCode;
    socket.isLeader = true;
    socket.followerName = 'Leader';
    registrations[sessionCode] = {
      state: 'running',
      followers: {}
    };
    registrations[sessionCode].followers[socket.id] = socket;
    socket.join(sessionCode);
    return sessionCode;
  };

  joinTrackingSession = function(sessionCode, followerName, socket) {
    var curCount, followerId, session;
    logger('Join', "" + followerName + " is trying to join " + sessionCode);
    followerId = socket.id;
    session = registrations[sessionCode];
    if (_.isObject(session)) {
      logger('Join', "Tracking session found: " + sessionCode);
      curCount = _.keys(session.followers).length;
      if (curCount >= MAX_FOLLOWERS) {
        logger('Join', "Failed: " + curCount + " on " + MAX_FOLLOWERS + " followers available");
        return null;
      }
      socket.followerName = followerName;
      socket.trackingSessionCode = sessionCode;
      socket.isLeader = false;
      session.followers[socket.id] = socket;
      socket.join(sessionCode);
      logger('Join', "Sending new follower to session: " + sessionCode);
      socket.broadcast.to(sessionCode).emit('newFollower', followerId, followerName, socket.isLeader);
      return true;
    } else {
      logger('Join', "Tracking session not found: " + sessionCode);
      return false;
    }
  };

  abortTrackingSession = function(socket) {
    var followerId, session, sessionCode;
    sessionCode = socket.trackingSessionCode;
    session = registrations[sessionCode];
    followerId = socket.id;
    if (_.isObject(session)) {
      if (socket.isLeader) {
        logger('Join', "Sending leader deconnection for session: " + sessionCode);
        socket.broadcast.to(sessionCode).emit('endOfTrackingSession', sessionCode);
        return delete registrations[sessionCode];
      } else {
        logger('Join', "Sending follower deconnection: " + socket.id);
        return socket.broadcast.to(sessionCode).emit('followerDeco', followerId, socket.followerName);
      }
    }
  };

  informLocationUpdate = function(socket, location) {
    var followerId, session, sessionCode;
    followerId = socket.id;
    sessionCode = socket.trackingSessionCode;
    session = registrations[sessionCode];
    if (_.isObject(session)) {
      logger('Location', "Transfer location to session: " + sessionCode);
      return socket.broadcast.to(sessionCode).emit('newLocation', followerId, location, socket.isLeader);
    }
  };

  notifyFollower = function(socket, followerId) {
    var dest, session, sessionCode;
    sessionCode = socket.trackingSessionCode;
    session = registrations[sessionCode];
    dest = session.followers[followerId];
    if (dest) {
      logger('Join', 'Relay presence');
      return dest.emit('newFollower', socket.id, socket.followerName, socket.isLeader);
    }
  };

  io.sockets.on('connection', function(socket) {
    logger('Connection', "New socket found: " + socket.id);
    socket.on('startTrackingSession', function() {
      return socket.emit('setSessionCode', registerTrackingSessionCode(socket));
    });
    socket.on('joinTrackingSession', function(sessionCode, followerName) {
      if (joinTrackingSession(sessionCode, followerName, socket)) {
        return socket.emit('joinedSession', sessionCode);
      } else {
        return socket.emit('noSession', sessionCode);
      }
    });
    socket.on('notifyFollower', function(followerId) {
      return notifyFollower(socket, followerId);
    });
    socket.on('updateTracking', function(location) {
      logger('Location', "Transfer location of: " + socket.id);
      return informLocationUpdate(socket, location);
    });
    socket.on('leaveTrackingSession', function() {
      return abortTrackingSession(socket);
    });
    return socket.on('disconnect', function() {
      logger('Connection', "Socket lost: " + socket.id);
      return abortTrackingSession(socket);
    });
  });

}).call(this);
